#!/usr/bin/env python3
"""
Script de verifica√ß√£o final para confirmar que os problemas de amizade foram resolvidos
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from models.amizade_model import AmizadeModel
from controllers.amizade_controller import AmizadeController, SolicitacaoAmizadeRequest

def verificar_correcoes():
    """Verificar se todas as corre√ß√µes foram aplicadas corretamente"""
    print("=== VERIFICA√á√ÉO FINAL DAS CORRE√á√ïES ===")
    print()
    
    # 1. Verificar se o modelo de amizade funciona
    print("1. Testando AmizadeModel...")
    model = AmizadeModel()
    
    # Limpar dados de teste anteriores
    model.remover_amizade("johnatas2", "johnatas")
    
    # Teste b√°sico do model
    result = model.enviar_solicitacao("johnatas2", "johnatas")
    if result["success"]:
        print("  ‚úì AmizadeModel funcionando corretamente")
        
        # Limpar ap√≥s teste
        model.remover_amizade("johnatas2", "johnatas")
    else:
        print(f"  ‚úó Erro no AmizadeModel: {result['error']}")
        return False
    
    # 2. Verificar se o controller funciona
    print("2. Testando AmizadeController...")
    controller = AmizadeController()
    
    # Simular dados do usu√°rio autenticado
    class MockUser:
        def __init__(self, email):
            self.email = email
    
    # Teste do controller
    mock_user = MockUser("johnatas@usp.br")  # email do johnatas2
    solicitacao_data = SolicitacaoAmizadeRequest(destinatario="johnatas")
    
    # Primeiro verificar se consegue buscar o nickname do email
    nickname_result = controller._get_nickname_from_email(mock_user.email)
    if nickname_result["success"]:
        print(f"  ‚úì Nickname encontrado: {nickname_result['data']}")
        
        # Agora testar o envio da solicita√ß√£o
        solicitante = nickname_result["data"]
        result = controller.enviar_solicitacao(solicitante, solicitacao_data)
        
        if result["success"]:
            print("  ‚úì AmizadeController funcionando corretamente")
            
            # Limpar ap√≥s teste
            model.remover_amizade(solicitante, solicitacao_data.destinatario)
        else:
            print(f"  ‚úó Erro no AmizadeController: {result['error']}")
            return False
    else:
        print(f"  ‚úó Erro ao buscar nickname: {nickname_result['error']}")
        return False
    
    print()
    print("üéâ TODAS AS CORRE√á√ïES FORAM APLICADAS COM SUCESSO!")
    print()
    print("Resumo das corre√ß√µes realizadas:")
    print("‚úì Sincronizados usu√°rios entre tabelas 'pessoa' e 'usuario'")
    print("‚úì Adicionada valida√ß√£o de exist√™ncia do solicitante no controller")
    print("‚úì Removidos m√©todos problem√°ticos do UsuarioModel")
    print("‚úì Sistema de amizade funcionando sem erros de chave estrangeira")
    
    return True

def testar_cenarios_edge():
    """Testar cen√°rios espec√≠ficos para garantir robustez"""
    print("\n=== TESTES DE CEN√ÅRIOS ESPEC√çFICOS ===")
    
    controller = AmizadeController()
    model = AmizadeModel()
    
    # Cen√°rio 1: Usu√°rio inexistente na tabela pessoa
    print("1. Testando usu√°rio inexistente na tabela pessoa:")
    class MockUser:
        def __init__(self, email):
            self.email = email
    
    mock_user = MockUser("usuario_inexistente@teste.com")
    nickname_result = controller._get_nickname_from_email(mock_user.email)
    
    if not nickname_result["success"]:
        print("  ‚úì Tratamento correto para usu√°rio inexistente na tabela pessoa")
    else:
        print("  ‚úó PROBLEMA: Encontrou usu√°rio que n√£o deveria existir")
        return False
    
    # Cen√°rio 2: Destinat√°rio inexistente
    print("2. Testando destinat√°rio inexistente:")
    solicitacao_data = SolicitacaoAmizadeRequest(destinatario="usuario_inexistente")
    result = controller.enviar_solicitacao("johnatas2", solicitacao_data)
    
    if not result["success"] and "n√£o encontrado" in result["error"].lower():
        print("  ‚úì Tratamento correto para destinat√°rio inexistente")
    else:
        print(f"  ‚úó PROBLEMA: {result}")
        return False
    
    print("\n‚úì Todos os cen√°rios espec√≠ficos funcionando corretamente!")
    return True

if __name__ == "__main__":
    sucesso = verificar_correcoes()
    
    if sucesso:
        sucesso = testar_cenarios_edge()
    
    if sucesso:
        print("\n" + "="*60)
        print("üèÜ SISTEMA DE AMIZADE TOTALMENTE CORRIGIDO!")
        print("   O erro de chave estrangeira foi resolvido.")
        print("   Todos os testes passaram com sucesso.")
        print("="*60)
    else:
        print("\n‚ùå Ainda h√° problemas que precisam ser corrigidos.")
