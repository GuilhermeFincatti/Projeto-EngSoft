#!/usr/bin/env python3
"""
Script para testar as funcionalidades implementadas
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def testar_implementacoes():
    print("üöÄ Testando implementa√ß√µes do sistema ESALQ Explorer\n")
    
    # 1. Testar cartas com descri√ß√µes
    print("1Ô∏è‚É£ Testando cartas com descri√ß√µes e nomes...")
    try:
        from models.carta_model import CartaModel
        carta_model = CartaModel()
        result = carta_model.find_all(3)
        
        if result["success"]:
            print(f"‚úÖ {len(result['data'])} cartas encontradas")
            for carta in result["data"]:
                print(f"   üìç {carta['qrcode']}: {carta.get('nome', 'Sem nome')}")
                print(f"      Raridade: {carta.get('raridade', 'comum')}")
                print(f"      Descri√ß√£o: {carta.get('descricao', 'Sem descri√ß√£o')[:50]}...")
                print()
        else:
            print(f"‚ùå Erro: {result['error']}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    # 2. Testar cole√ß√£o com informa√ß√µes melhoradas
    print("2Ô∏è‚É£ Testando cole√ß√£o do usu√°rio...")
    try:
        from models.colecao_model import ColecaoModel
        colecao_model = ColecaoModel()
        result = colecao_model.get_colecao_usuario('johnatas1')
        
        if result["success"] and result["data"]:
            print(f"‚úÖ {len(result['data'])} cartas na cole√ß√£o")
            for item in result["data"]:
                carta = item.get("carta", {})
                print(f"   üÉè {item['qrcode']}: {carta.get('nome', 'Sem nome')} (x{item['quantidade']})")
                print(f"      Raridade: {carta.get('raridade', 'comum')}")
                if carta.get('imagem'):
                    print(f"      üñºÔ∏è  Tem imagem")
        else:
            print("‚ÑπÔ∏è Cole√ß√£o vazia ou usu√°rio n√£o encontrado")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    # 3. Testar miss√µes
    print("3Ô∏è‚É£ Testando sistema de miss√µes...")
    try:
        from models.missao_model import MissaoModel
        from models.missaoqtd_model import MissaoQtdModel
        
        missao_model = MissaoModel()
        missaoqtd_model = MissaoQtdModel()
        
        missoes_result = missao_model.find_all()
        qtd_result = missaoqtd_model.find_all()
        
        if missoes_result["success"]:
            print(f"‚úÖ {len(missoes_result['data'])} miss√µes encontradas")
            for missao in missoes_result["data"][:3]:
                print(f"   üéØ {missao['codigo']}: {missao['tipo']}")
                print(f"      Educador: {missao['educador']}")
                
                # Verificar se tem requisito de quantidade
                qtd_req = next((q for q in qtd_result.get('data', []) if q.get('codigo') == missao['codigo']), None)
                if qtd_req:
                    print(f"      Requisito: {qtd_req.get('quantidadetotal', 'N/A')} cartas")
                print()
        else:
            print(f"‚ùå Erro: {missoes_result['error']}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    print("‚ú® Teste completo!")
    print("\nüì± Para testar no app:")
    print("1. Abra o ESALQ Explorer")
    print("2. V√° para Cole√ß√£o - deve mostrar cartas com nomes e imagens")
    print("3. V√° para Miss√µes - deve mostrar miss√µes com progresso")
    print("4. Toque em uma carta coletada para ver detalhes com imagem")

if __name__ == "__main__":
    testar_implementacoes()
